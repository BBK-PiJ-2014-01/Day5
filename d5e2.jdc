println("Factorial 5:");
println(factorial_recursive(5));
println(factorial_iterative(5));
println();

println("10th Fibonacci number:");
println(fibonacci_recursive(10)); 
println(fibonacci_iterative(10));
println();

println("Hanoi towers with three posts:");
println("With 3 disks, " + hanoi(3) + " moves are required");
println("With 4 disks, " + hanoi(4) + " moves are required");
println("With 5 disks, " + hanoi(5) + " moves are required");

// 2.1 Factorial - Code complete

int factorial_recursive(int n) {	
	if (n == 1)
		return(1);
	else {	
		int result = n * factorial_recursive(n-1);
		return(result);
	}
}

int factorial_iterative(int n) {
	int result = n;
	for (int i = n-1 ; i > 0; i--) {
		result *= i;
	}
	return(result);
}

// 2.2 Fibonacci - Code complete

int fibonacci_recursive(int n) {
	if ((n==1) || (n==2))
		return(1);
	else {
		int result = fibonacci_recursive(n-1) + fibonacci_recursive(n-2);
		return(result);
	}
}

int fibonacci_iterative(int n) {
	int result = 0;
	int lastResult = 0;
	int beforeLastResult = 0;
	for (int i=1; i<=n ; i++) {
		if (i==1) {
			result = 1;
			lastResult = 1;
		} else {
			if (i==2) {
				result = 1;
				beforeLastResult = lastResult;
				lastResult = 1; 
			} else {
				result = beforeLastResult + lastResult;
				beforeLastResult = lastResult;
				lastResult = result;
			}		
		}
	}
	return(result);
} 

// 2.3 Hanoi towers - Code complete

int hanoi(int n) {
	int result = 0;
	if (n==1)
		result = 1;
	else
		result = 2 * hanoi(n-1) + 1;
	return(result);
}